# -*- coding: utf-8 -*-
"""week5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10jnHYe0rdeEq0p2PZwLI7YNv3qvmiY6M
"""

#encapsulation
''' basic encapsulation with attributes, private attributes
1.__var, __x,__a
self.__a
'''
class car:
  def __init__ (self,brand,speed):
    self.brand=brand
    self.__speed=speed
  def get_speed(self):
    return self.__speed
  def set_speed(self,speed):
    if speed>=0:
      self.__speed=speed
    else:
      print("Car is not moving")
c=car("BMW",178)
print(c.brand)
print(c.get_speed())
c.set_speed(2000)
print(c.get_speed())
c.set_speed(-10)

#protected attributes
class student:
  def __init__(self,name,age):
    self._name=name
    self._age=age
  def display(self):
    print(f"name: {self._name},age: {self._age}")
obj=student("dwsc",34)

obj.display()

#private methods
class employee:
  def __init__ (self,name,salary):
    self.name=name
    self.__salary=salary
  def __bonus(self):
    return self.__salary*0.4
  def package(self):
    return self.__salary + self.__bonus()
e=employee("dew",20000)
print(e.package())

'''calculating the aavg of 4 subjects of a student by taking protected attributes, pass name and four subjects marks to class student find gpa and assign the Avg to  gpa
name="*****"
marks=[99,79,84,95]
output=average of grades=90.0
output=name ****.gpa=90.00'''
class stu:
  def __init__(self,name,grades):
    self._name=name
    self._grades=grades
  def gpa(self):
    if not self._grades:
      return 0
    return sum(self._grades)/len(self._grades)
  def display(self):
    print(f" name: {self._name},grades: {self._grades}")
s=stu("was",[99,79,84,95])
print(s.gpa())
s.display()

''' errors and exceptions'''
5/0

"""'''build - in exceptions'''
1. Exception
2. StandardError
3. SyatemError - sys.exit()
4. OverflowError
5. ArthimeticError
6. IndexError
7. KeyError
8. KeyboardIterupt
9. stopIterationError
10' Envitonmental Error
11. IOError
12. NotImplementedError


"""

#handle zero exception
n1=int(input("enter the numerator:"))
n2=int(input("enter the denominator"))
try:
  quo=n1/n1
  print("quotient:",quo)
except ZeroDivisionError:
  print("denominator cannot be zero")

#multiple exception blocks
try:
  num=int(input("enter a number:"))
  print(num**3)
except(KeyboardInterrupt):
  print("enter only numeric,,,, program end!!")
except(ValueError):
  print("please enter carefully...")
print("Exit from exception")

try:
  num=int(input("enter a number:"))
  print(num-53)
except(KeyboardInterrupt, ValueError, TypeError):
  print("accesing from the bloks above")
print("end")